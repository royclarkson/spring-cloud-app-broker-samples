/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE")
        classpath("io.spring.nohttp:nohttp-gradle:0.0.3.RELEASE")
    }
}

plugins {
    id "io.franzbecker.gradle-lombok" version '3.2.0'
}

ext {
    springCloudAppBrokerVersion = project.findProperty("springCloudAppBrokerVersion") ?: "1.0.4.RELEASE"
    springBootVersion = project.findProperty("springBootVersion") ?: "2.2.2.RELEASE"
    checkstyleVersion = "8.21"
    pmdVersion = "6.19.0"
}

// NoHttp has to be applied at the root level
// so that it reads all the root files, including the gradle ones.
apply plugin: "io.spring.nohttp"

// nohttp requires a valid checkstyle configuration
checkstyle {
    configFile = file("${project.rootDir}/src/checkstyle/checkstyle-nohttp.xml")
    toolVersion = "${checkstyleVersion}"
}

configure(allprojects) {
    group = "org.springframework.cloud"

    apply plugin: "java"
    apply plugin: "eclipse"
    apply plugin: "idea"
    apply plugin: "pmd"
    apply plugin: "checkstyle"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "io.franzbecker.gradle-lombok"

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/libs-release" }
        maven { url "https://repo.spring.io/libs-snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
        testRuntimeOnly("io.spring.nohttp:nohttp:0.0.3.RELEASE")
    }

    checkstyle {
        configFile = file("${project.rootDir}/src/checkstyle/checkstyle.xml")
        toolVersion = "${checkstyleVersion}"
    }
    checkstyleMain {
        source = "src/main/java"
    }
    checkstyleTest {
        source = "src/test/java"
    }

    pmd {
        toolVersion = "${pmdVersion}"
    }
    pmdMain {
        ruleSets = []
        ruleSetFiles = files("${project.rootDir}/src/pmd/pmdRuleSet.xml")
        source = "src/main/java"
    }
    pmdTest {
        ruleSets = []
        ruleSetFiles = files("${project.rootDir}/src/pmd/pmdTestRuleSet.xml")
        source = "src/test/java"
    }

    lombok {
        version = '1.18.2'
        sha256 = "524e0a697e9d62950b2f763d88d35cd8dc82a9a1"
    }

    test {
        // enable JUnit 5
        useJUnitPlatform()

        testLogging {
            // display all the events
            events 'PASSED', 'FAILED', 'SKIPPED'
            // display stdout and stderr
            showStandardStreams = true
        }

        // create a summary after the execution
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest result: ${result.resultType}"
                println "Test summary: ${result.testCount} tests, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped"
            }
        }

        // print failed tests after the execution
        def failedTests = []

        afterTest { test, result ->
            if (result.resultType == TestResult.ResultType.FAILURE) {
                failedTests << test
            }
        }

        afterSuite {
            failedTests.each { test -> println "FAILED test: ${test.className} > ${test.name}" }
        }
    }

}

subprojects {
    task allDependencyInsight(type: DependencyInsightReportTask)
    task dependencyReport(type: DependencyReportTask)
}

configure(subprojects) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    [compileJava, compileTestJava]*.options*.encoding = "UTF-8"

    [compileJava, compileTestJava]*.options*.compilerArgs = [
            "-Xlint:serial",
            "-Xlint:varargs",
            "-Xlint:cast",
            "-Xlint:classfile",
            "-Xlint:dep-ann",
            "-Xlint:divzero",
            "-Xlint:empty",
            "-Xlint:finally",
            "-Xlint:overrides",
            "-Xlint:path",
            "-Xlint:-processing",
            "-Xlint:static",
            "-Xlint:try",
            "-Xlint:fallthrough",
            "-Xlint:rawtypes",
            "-Xlint:deprecation",
            "-Xlint:unchecked",
            "-Xlint:-options",
            "-Werror"
    ]

    configurations {
        // exclude JUnit 4 globally, in favor of JUnit 5
        testImplementation.exclude group: "junit", module: "junit"
    }
}
